{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///js/tmpl-router.min.js","webpack:///webpack/bootstrap 3cea46285a8eab7a7ad7?09aa","webpack:///./src/tmpl-router/tmpl-router.js?cfe3","webpack:///./src/index.js?9552","webpack:///./src/tmpl-router/config.js?426d","webpack:///./src/tmpl-router/get-tmpl.js?a4e4","webpack:///./src/tmpl-router/hash-change.js?6582","webpack:///./src/tmpl-router/init.js?10ed","webpack:///./src/tmpl-router/set.js?a02b"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_interopRequireDefault","obj","default","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","_init2","_init3","_hashChange2","_hashChange3","_getTmpl2","_getTmpl3","TmplRouter","opts","constructor","hasTmplRouter","tmplRouter","init","routerOpts","_this","fn","isObj","each","opt","routes","setPaths","page","isNum","history","go","hash","replace","href","location","split","join","searchs","isStr","query","search","_search","index","temp","el","tmpl","path","attr","e","serialize","undefined","window","status","routerStatus","Tmpl","installed","install","_tmplRouter","_tmplRouter2","global","demand","version","config","routerLink","routerLinkActive","routerView","routerAnchor","routerAnchorAttr","routerAnchorTop","anchorTime","data","methods","getTmpl","childNodes","tmplUrl","tmplId","$","ajax","async","url","success","appendChild","create","filterTextNode","changeRoutereStatus","error","html","getEl","parentEl","nodeType","textContent","trim","remove","protoHashChange","routerBtns","getEls","$lastRouter","getHash","hasAlias","alias","getPathAlias","apply","run","routerEnter","$from","hashChange","fullPath","lastRouter","alinkEl","hideTmplEl","showTmplEl","currentRouter","addClass","removeClass","setRouterScroll","routerEntered","_this2","view","_this3","children","push","keepLive","setScrollTop","scrollTop","num","document","body","parseFloat","documentElement","router","extend","copy","_config2","_set","setRouter","setInstance","setRouterLinkStatus","setRouterAnchor","setkeepLive","setHashEvent","created","mounted","_config","routers","_path","__path","isArr","type","_get","routerBtn","on","event","triggerRouter","redirect","preventDefault","time","stopScroll","_this4","anchorId","anchorEl","anchorOffsetTop","Number","isEl","addEventListener","animate","offset","top","removeEventListener","_this5","_this6","createDocumentFragment","_this7","onhashchange"],"mappings":"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","file":"./js/tmpl-router.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"TmplRourt\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TmplRourt\"] = factory();\n\telse\n\t\troot[\"TmplRourt\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","/*!\n * \n * \t\t\ttmpl-router.js v1.0.2\n * \t\t\t(c) 2016-2017 Blue\n * \t\t\tReleased under the MIT License.\n * \t\t\thttps://github.com/azhanging/tmpl-router\n * \t\t\ttime:Sat Sep 16 2017 23:37:06 GMT+0800 (中国标准时间)\n * \t\t\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"TmplRourt\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TmplRourt\"] = factory();\n\telse\n\t\troot[\"TmplRourt\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //初始化\n\n//hashChange\n\n//动态加载模板\n\n\nvar _init2 = __webpack_require__(5);\n\nvar _init3 = _interopRequireDefault(_init2);\n\nvar _hashChange2 = __webpack_require__(4);\n\nvar _hashChange3 = _interopRequireDefault(_hashChange2);\n\nvar _getTmpl2 = __webpack_require__(3);\n\nvar _getTmpl3 = _interopRequireDefault(_getTmpl2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * 路由构造\r\n * \r\n * */\nvar TmplRouter = function () {\n\tfunction TmplRouter(opts) {\n\t\t_classCallCheck(this, TmplRouter);\n\n\t\t//如果已经实例化了一次，直接返回实例化的路由\n\t\tif (this.constructor.hasTmplRouter) {\n\t\t\treturn this.constructor.tmplRouter;\n\t\t};\n\t\tthis.init(opts);\n\t}\n\n\t//安装插件\n\n\n\t_createClass(TmplRouter, [{\n\t\tkey: 'init',\n\t\tvalue: function init(opts) {\n\t\t\t_init3.default.call(this, opts);\n\t\t}\n\n\t\t/*设置路由路径*/\n\n\t}, {\n\t\tkey: 'set',\n\t\tvalue: function set(routerOpts) {\n\t\t\tvar _this = this;\n\n\t\t\tvar fn = this.constructor.fn;\n\t\t\tif (fn.isObj(routerOpts)) {\n\t\t\t\tfn.each(routerOpts, function (opt, key) {\n\t\t\t\t\t_this.routes[key] = opt;\n\t\t\t\t});\n\t\t\t}\n\t\t\t//设置路由配置\n\t\t\tsetPaths.call(this, routerOpts);\n\t\t\treturn this;\n\t\t}\n\n\t\t//hash改变调用\n\n\t}, {\n\t\tkey: 'hashChange',\n\t\tvalue: function hashChange() {\n\t\t\t_hashChange3.default.call(this);\n\t\t}\n\t}, {\n\t\tkey: 'go',\n\t\tvalue: function go(page) {\n\t\t\tvar fn = this.constructor.fn;\n\t\t\tif (fn.isNum(page)) history.go(page);\n\t\t}\n\t}, {\n\t\tkey: 'redirect',\n\t\tvalue: function redirect(hash) {\n\t\t\thash = hash.replace('#', '');\n\t\t\tvar href = location.href.split('#');\n\t\t\tif (hash === '/') {\n\t\t\t\tlocation.href = href[0];\n\t\t\t} else {\n\t\t\t\thref[1] = hash;\n\t\t\t\tlocation.href = href.join('#');\n\t\t\t}\n\t\t}\n\n\t\t/*获取模板*/\n\n\t}, {\n\t\tkey: 'getTmpl',\n\t\tvalue: function getTmpl(hash) {\n\t\t\t_getTmpl3.default.call(this, hash);\n\t\t}\n\n\t\t/*返回参数对象*/\n\n\t}, {\n\t\tkey: 'query',\n\t\tvalue: function query(searchs) {\n\t\t\tvar fn = this.constructor.fn;\n\t\t\tif (!fn.isStr(searchs)) return {};\n\t\t\tvar query = {},\n\t\t\t    search = searchs.split('&');\n\t\t\tfn.each(search, function (_search, index) {\n\t\t\t\tvar temp = _search.split('=');\n\t\t\t\tif (temp.length !== 1) {\n\t\t\t\t\tvar key = temp[0];\n\t\t\t\t\tvar value = temp[1];\n\t\t\t\t\tquery[key] = value;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn query;\n\t\t}\n\n\t\t/*获取|设置hash-url参数*/\n\n\t}, {\n\t\tkey: 'search',\n\t\tvalue: function search(el, _search2) {\n\n\t\t\tvar fn = this.constructor.fn,\n\t\t\t    tmpl = this.constructor.tmpl;\n\n\t\t\tvar path = '';\n\n\t\t\ttry {\n\t\t\t\tpath = tmpl.attr(el, 'href').split('?');\n\t\t\t} catch (e) {\n\t\t\t\tpath = el.split('?');\n\t\t\t}\n\n\t\t\tif (_search2) {\n\t\t\t\tif (fn.isObj(_search2)) {\n\t\t\t\t\t_search2 = fn.serialize(_search2);\n\t\t\t\t}\n\t\t\t\tpath[1] = _search2;\n\t\t\t\ttmpl.attr(el, {\n\t\t\t\t\thref: path.join('?')\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn path[1];\n\t\t\t}\n\t\t}\n\n\t\t/*分离hash和hash-search，只取hash*/\n\n\t}, {\n\t\tkey: 'getHash',\n\t\tvalue: function getHash(hash) {\n\t\t\tif (hash === undefined) {\n\t\t\t\thash = window.location.hash.replace('#', '');\n\t\t\t}\n\t\t\tvar path = hash.replace('#', '').split('?');\n\t\t\treturn path[0];\n\t\t}\n\n\t\t/* 修改路由link的点击的状态 */\n\n\t}, {\n\t\tkey: 'changeRoutereStatus',\n\t\tvalue: function changeRoutereStatus(status) {\n\t\t\tthis.routerStatus = status;\n\t\t}\n\t}], [{\n\t\tkey: 'install',\n\t\tvalue: function install(Tmpl) {\n\n\t\t\t//检查是否安装过路由了\n\t\t\tif (this.installed) return this;\n\n\t\t\tthis.installed = true;\n\n\t\t\tthis.tmpl = new Tmpl({});\n\n\t\t\tthis.fn = this.tmpl.fn;\n\t\t}\n\t}]);\n\n\treturn TmplRouter;\n}();\n\n//查看是否在全局中存在插件\n\n\nexports.default = TmplRouter;\nif (window.Tmpl && typeof Tmpl === 'function') {\n\tTmplRouter.install(Tmpl);\n}\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _tmplRouter = __webpack_require__(0);\n\nvar _tmplRouter2 = _interopRequireDefault(_tmplRouter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function (global, factory) {\n\tif (typeof demand === 'function') {\n\t\tdemand.define('tmpl-router', factory);\n\t}\n})(typeof window !== 'undefined' ? window : undefined, function () {\n\n\t_tmplRouter2.default.version = \"v1.0.3\";\n\n\treturn _tmplRouter2.default;\n}); //TmplRouter 文件入口\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n/*默认配置*/\nvar config = {\n\trouterLink: 'tmpl-router', //.tmpl-router                       \n\trouterLinkActive: 'tmpl-router-active', //.tmpl-router-active\n\trouterView: 'tmpl-router-view', //#tmpl-router-view\n\trouterAnchor: 'tmpl-router-anchor', //锚点用的class\n\trouterAnchorAttr: 'tmpl-anchor', //路由锚点的id属性\n\trouterAnchorTop: 'tmpl-anchor-top', //路由锚点的差点\n\tanchorTime: 1000, //默认锚点路由 1000/17\n\tdata: {},\n\tmethods: {}\n};\n\nexports.default = config;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = getTmpl;\n/*\r\n *\t动态加载模板 \r\n * */\n\nfunction getTmpl(hash) {\n\n\tvar fn = this.constructor.fn;\n\n\tvar tmpl = this.constructor.tmpl;\n\n\tvar _this = this;\n\n\t//查看当前的路由 模板是否加载回来了\n\tif (!this.routes[hash] || this.routes[hash]['view'].length > 0 || this.routes[hash]['temp'].childNodes.length > 0) return;\n\n\tvar tmplUrl = this.routes[hash]['tmplUrl']; //获取请求的url\n\n\tvar tmplId = this.routes[hash]['tmplId']; //获取静态模板的id\n\n\t/*动态模板*/\n\tif (tmplUrl) {\n\t\ttry {\n\t\t\t$.ajax({\n\t\t\t\tasync: false,\n\t\t\t\turl: tmplUrl,\n\t\t\t\tsuccess: function success(data) {\n\t\t\t\t\t_this.routes[hash]['temp'].appendChild(tmpl.create(data.tmpl));\n\t\t\t\t\tfilterTextNode.call(_this, _this.routes[hash]['temp']);\n\t\t\t\t\t_this.changeRoutereStatus(false);\n\t\t\t\t},\n\t\t\t\terror: function error(data) {\n\t\t\t\t\t_this.changeRoutereStatus(true);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tfn.ajax({\n\t\t\t\tasync: false,\n\t\t\t\turl: tmplUrl,\n\t\t\t\tsuccess: function success(data) {\n\t\t\t\t\t_this.routes[hash]['temp'].appendChild(tmpl.create(data.tmpl));\n\t\t\t\t\tfilterTextNode.call(_this, _this.routes[hash]['temp']);\n\t\t\t\t\t_this.changeRoutereStatus(false);\n\t\t\t\t},\n\t\t\t\terror: function error(data) {\n\t\t\t\t\t_this.changeRoutereStatus(true);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t} else if (tmplId) {\n\t\ttry {\n\t\t\tthis.routes[hash]['temp'].appendChild(tmpl.create(tmpl.html(fn.getEl(tmplId)))); //非动态模板\t\n\t\t} catch (e) {\n\t\t\tthis.routes[hash]['temp'].appendChild(tmpl.create(''));\n\t\t}\n\t\tthis.changeRoutereStatus(true);\n\t}\n}\n\n/*清空空的文本节点*/\nfunction filterTextNode(parentEl) {\n\n\tvar fn = this.constructor.fn;\n\n\tvar tmpl = this.constructor.tmpl;\n\n\tfn.each(parentEl.childNodes, function (el, index) {\n\t\tif (el && el.nodeType === 3 && el.textContent.trim() === '') {\n\t\t\ttmpl.remove(el);\n\t\t}\n\t});\n}\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = protoHashChange;\n/*\r\n *\t路由中的hash方法处理\r\n * */\n\nfunction protoHashChange() {\n\n    var fn = this.constructor.fn,\n        path = window.location.hash.replace('#', ''),\n        routerBtns = fn.getEls(this.config.routerLink),\n        //获取路由绑定的节点\n    lastRouter = this.$lastRouter;\n\n    var hash = this.getHash(path),\n        //获取hash\n    hasAlias = false; //是否有别名\n\n    if (hash === '') hash = '/'; //如果不存在hash设置为根目录\n\n    //走别名路由\n    if (this.alias[hash]) {\n        hasAlias = true;\n        //判断是不是别名的路由\n        hash = getPathAlias.apply(this, [hash === '/' ? hash : path, null]);\n    }\n\n    //存在路由绑定\n    if (routerBtns.length === 0) return this;\n\n    //error页面\n    if (!this.alias[hash] && !this.routes[hash]) {\n        fn.run(this.config.error, this);\n        return;\n    }\n\n    //使用路由中的钩子\n    fn.run(this.routes[hash].routerEnter, this, [path, this.$from]);\n\n    /*路由进入的全局钩子*/\n    fn.run(this.config.routerEnter, this, [path, this.$from]);\n\n    /*如果是存在别名路径，返回代理的那个路径*/\n    hashChange.apply(this, [routerBtns, hasAlias ? hash : path, path]);\n}\n\n/*hashChange的处理*/\nfunction hashChange(routerBtns, path, fullPath) {\n    var _this = this;\n\n    var fn = this.constructor.fn,\n        tmpl = this.constructor.tmpl,\n        hash = this.getHash(path),\n        lastRouter = this.$lastRouter;\n\n    //记录被点击的router-link\n    var alinkEl = null;\n\n    //默认动态加载模块\n    this.getTmpl(hash);\n\n    //是否存在最后一个路由地址\n    if (lastRouter) {\n        /*如果不是匹配的路由视图，则不显示在路由视图中*/\n        hideTmplEl.call(this, this.getHash(lastRouter));\n        this.$from = fullPath;\n    }\n\n    //记录最后的路由路径\n    this.$lastRouter = path;\n\n    showTmplEl.apply(this, [hash]); //显示路由的view\n\n    //修改对应的状态\n    fn.each(routerBtns, function (el, index) {\n        var path = tmpl.attr(el, 'href'),\n            href = _this.getHash(path);\n\n        if (href === hash) {\n            _this.currentRouter = href; //保存当前的路由\n\n            alinkEl = el; //保存按钮节点\n\n            tmpl.addClass(el, _this.config.routerLinkActive); //修改路由link的样式\n        } else {\n            /*存在配置路由*/\n            if (_this.routes[href]) hideTmplEl.call(_this, href); //如果不是匹配的路由视图，则不显示在路由视图中\n\n            tmpl.removeClass(el, _this.config.routerLinkActive);\n        }\n\n        /*如果设置的节点没有绑定到对应的节点上*/\n        if (!alinkEl) _this.currentRouter = hash;\n    });\n\n    //设置keeplive\n    setRouterScroll.call(this, hash);\n\n    //使用路由中的钩子\n    fn.run(this.routes[hash].routerEntered, this, [path, this.$from, alinkEl]);\n\n    //调用全局进入结束钩子\n    fn.run(this.config.routerEntered, this, [path, this.$from, alinkEl]);\n}\n\n/*检查当前路径是否存在别名*/\nfunction getPathAlias(path, el) {\n\n    var fn = this.constructor.fn,\n        hash = this.getHash(path),\n        alias = this.alias[hash];\n\n    //别名触发钩子\n    /*if(this.routes[hash]) {\r\n        fn.run(this.routes[hash].routerEnter, this, [path]);\r\n        fn.run(this.config.routerEnter, this, [path, el]);\r\n        fn.run(this.routes[hash].routerEntered, this, [path]);\r\n        fn.run(this.config.routerEntered, this, [path, el]);\r\n    }*/\n\n    //如果别名存在别名，递归使用\n    if (this.alias[alias]) {\n        return getPathAlias.apply(this, [alias, el]);\n    } else {\n        return alias;\n    }\n}\n\n/*保存节点信息*/\nfunction hideTmplEl(hash) {\n    var _this2 = this;\n\n    var fn = this.constructor.fn;\n    /*如果不是匹配的路由视图，则不显示在路由视图中*/\n    fn.each(this.routes[hash].view, function (el, index) {\n        _this2.routes[hash].temp.appendChild(el);\n    });\n    this.routes[hash].view = [];\n}\n\n/*显示节点信息*/\nfunction showTmplEl(hash) {\n    var _this3 = this;\n\n    var fn = this.constructor.fn,\n        tmpl = this.constructor.tmpl,\n        view = this.routerView;\n\n    //更新view层\n    view.appendChild(this.routes[hash].temp);\n\n    //保存view层节点\n    fn.each(tmpl.children(view), function (el, index) {\n        _this3.routes[hash].view.push(el);\n    });\n}\n\n//设置路由的scroll\nfunction setRouterScroll(hash) {\n    /*是否使用了保存之前的状态*/\n    if (this.config.keepLive && this.routes[hash].keepLive) {\n        setScrollTop.call(this, this.routes[hash].scrollTop);\n    } else {\n        setScrollTop.call(this, 0);\n    }\n}\n\n/*设置scrollTop*/\nfunction setScrollTop(num) {\n    var fn = this.constructor.fn;\n    if (!fn.isNum(num)) return 0;\n    try {\n        document.body.scrollTop = parseFloat(num);\n    } catch (e) {\n        document.documentElement.scrollTop = parseFloat(num);\n    }\n}\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = init;\n\nvar _config = __webpack_require__(2);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _set = __webpack_require__(6);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//路由初始\n//配置参数\nfunction init(opts) {\n\n\tvar fn = this.constructor.fn;\n\n\tthis.routes = {};\n\n\t//把第一次的实例对象挂在到构造上\n\tthis.constructor.tmplRouter = this;\n\n\t//只有一次路由实例，挂载到tmpl上\n\tthis.constructor.tmpl.constructor.router = this;\n\n\tthis.config = fn.extend(fn.copy(_config2.default), opts);\n\n\tthis.routerView = fn.getEl(this.config.routerView);\n\n\t_set.setRouter.call(this, this.config.routes ? this.config.routes : {});\n\n\t_set.setInstance.call(this, 'methods'); //设置methods\n\n\t_set.setInstance.call(this, 'data'); //设置data\n\n\t_set.setRouterLinkStatus.call(this); //设置路由链接的状态\n\n\t_set.setRouterAnchor.call(this, this.config.anchorTime); //设置路由的锚点形式\n\n\t_set.setkeepLive.call(this); //设置保持状态\n\n\t_set.setPaths.call(this, this.routes); //处理路由详情 \n\n\t_set.setHashEvent.call(this); //设置hash\n\n\tfn.run(this.config.created, this); //所有创建后的钩子\n\n\tthis.hashChange(); //初始化好了初始化hash\n\n\tfn.run(this.config.mounted, this); //所有完毕后的钩子\n}\n//设置的handler\n;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.setRouter = setRouter;\nexports.setInstance = setInstance;\nexports.setRouterLinkStatus = setRouterLinkStatus;\nexports.setRouterAnchor = setRouterAnchor;\nexports.setkeepLive = setkeepLive;\nexports.setPaths = setPaths;\nexports.setHashEvent = setHashEvent;\n//设置路由的路径\nfunction setRouter(routers, path) {\n    var _this = this;\n\n    var fn = this.constructor.fn,\n        _path = path ? path : '';\n\n    fn.each(routers, function (router, index) {\n        if (router.path === undefined) return;\n        var __path = _path + router.path;\n        if (fn.isArr(router.modules)) {\n            setRouter.apply(_this, [router.modules, __path]);\n        }\n        _this.routes[__path] = router;\n        delete router.modules;\n    });\n}\n\n//设置data和methods方法\nfunction setInstance(type) {\n    var _this2 = this;\n\n    var fn = this.constructor.fn,\n        get = this.config[type];\n\n    if (!fn.isObj(get)) {\n        return;\n    }\n\n    fn.each(get, function (_get, key) {\n        _this2[key] = _get;\n    });\n}\n\n/*设置路由的状态是够允许跳转*/\nfunction setRouterLinkStatus() {\n    var _this3 = this;\n\n    var fn = this.constructor.fn;\n\n    var tmpl = this.constructor.tmpl;\n\n    this.changeRoutereStatus(true);\n\n    var routerBtns = fn.getEls(this.config.routerLink); //获取路由绑定的节点\n\n    fn.each(routerBtns, function (routerBtn, index) {\n        fn.on(routerBtn, 'click', function (event) {\n            var path = tmpl.attr(routerBtn, 'href'),\n                hash = _this3.getHash(path);\n            if (!(_this3.getHash(_this3.$lastRouter) === hash)) {\n                //点击路由链接触发的钩子\n                fn.run(_this3.config.triggerRouter, _this3, [path, routerBtn]);\n            }\n            if (!_this3.routerStatus) {\n                event.preventDefault();\n            } else {\n                _this3.redirect(path);\n            }\n        });\n    });\n}\n\n/*设置路由的锚点形式*/\nfunction setRouterAnchor(time) {\n    var _this4 = this;\n\n    var fn = this.constructor.fn,\n        tmpl = this.constructor.tmpl;\n\n    function stopScroll(event) {\n        event.preventDefault();\n    }\n\n    //获取路由绑定的节点\n    tmpl.on(document, this.config.routerAnchor, 'click', function (event, el) {\n\n        var anchorId = tmpl.attr(el, _this4.config.routerAnchorAttr),\n            anchorEl = fn.getEl(anchorId);\n\n        var anchorOffsetTop = tmpl.attr(el, _this4.config.routerAnchorTop);\n\n        anchorOffsetTop = fn.isNum(anchorOffsetTop) ? Number(anchorOffsetTop) : 0;\n\n        if (fn.isEl(anchorEl)) {\n            //定义滑动阻止默认动作\n            window.addEventListener('mousewheel', stopScroll);\n\n            tmpl.animate(document, {\n                'scrollTop': tmpl.offset(anchorEl).top + anchorOffsetTop\n            }, time, function () {\n                window.removeEventListener('mousewheel', stopScroll);\n            });\n        }\n    });\n}\n\n/*设置保持状态*/\nfunction setkeepLive() {\n    var _this5 = this;\n\n    var fn = this.constructor.fn;\n    if (!this.config.keepLive) return;\n    fn.on(window, 'scroll', function (event) {\n        if (_this5.routes[_this5.currentRouter] && _this5.routes[_this5.currentRouter].keepLive) {\n            _this5.routes[_this5.currentRouter].scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n        }\n    });\n}\n\n//初始处理路由信息\nfunction setPaths(routes) {\n    var _this6 = this;\n\n    var fn = this.constructor.fn;\n\n    this.alias = {};\n\n    fn.each(routes, function (router, path) {\n\n        var alias = router.alias;\n\n        _this6.routes[path].view = []; //设置视图节点\n\n        //如果设置了全局的keepLive，就会默认设置保持节点为true,全局设定状态的时候是支持保持状态的\n        if (_this6.config.keepLive && _this6.routes[path].keepLive === undefined) {\n            _this6.routes[path].keepLive = true;\n        }\n\n        _this6.routes[path].temp = document.createDocumentFragment(); //设置临时存放节点\n\n        //存在别名\n        if (alias) {\n            _this6.alias[alias] = path;\n        }\n    });\n}\n\n//设置hash\nfunction setHashEvent() {\n    var _this7 = this;\n\n    var tmpl = this.constructor.tmpl;\n\n    if (!this.constructor.hasTmplRouter) {\n        //修改hash时触发修改\n        window.onhashchange = function (event) {\n            _this7.hashChange();\n            tmpl.preventDefault(event);\n        };\n        this.constructor.hasTmplRouter = true;\n    }\n}\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// js/tmpl-router.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3cea46285a8eab7a7ad7","//初始化\r\nimport init from './init';\r\n//hashChange\r\nimport hashChange from './hash-change';\r\n//动态加载模板\r\nimport getTmpl from './get-tmpl';\r\n\r\n/*\r\n * 路由构造\r\n * \r\n * */\r\nexport default class TmplRouter {\r\n\tconstructor(opts) {\r\n\t\t//如果已经实例化了一次，直接返回实例化的路由\r\n\t\tif(this.constructor.hasTmplRouter) {\r\n\t\t\treturn this.constructor.tmplRouter;\r\n\t\t};\r\n\t\tthis.init(opts);\r\n\t}\r\n\r\n\t//安装插件\r\n\tstatic install(Tmpl) {\r\n\r\n\t\t//检查是否安装过路由了\r\n\t\tif(this.installed) return this;\r\n\r\n\t\tthis.installed = true;\r\n\r\n\t\tthis.tmpl = new Tmpl({});\r\n\r\n\t\tthis.fn = this.tmpl.fn;\r\n\t}\r\n\r\n\tinit(opts) {\r\n\t\tinit.call(this, opts)\r\n\t}\r\n\r\n\t/*设置路由路径*/\r\n\tset(routerOpts) {\r\n\t\tconst fn = this.constructor.fn;\r\n\t\tif(fn.isObj(routerOpts)) {\r\n\t\t\tfn.each(routerOpts, (opt, key) => {\r\n\t\t\t\tthis.routes[key] = opt;\r\n\t\t\t});\r\n\t\t}\r\n\t\t//设置路由配置\r\n\t\tsetPaths.call(this, routerOpts);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t//hash改变调用\r\n\thashChange() {\r\n\t\thashChange.call(this);\r\n\t}\r\n\r\n\tgo(page) {\r\n\t\tconst fn = this.constructor.fn;\r\n\t\tif(fn.isNum(page)) history.go(page);\r\n\t}\r\n\r\n\tredirect(hash) {\r\n\t\thash = hash.replace('#', '');\r\n\t\tconst href = location.href.split('#');\r\n\t\tif(hash === '/') {\r\n\t\t\tlocation.href = href[0];\r\n\t\t} else {\r\n\t\t\thref[1] = hash;\r\n\t\t\tlocation.href = href.join('#');\r\n\t\t}\r\n\t}\r\n\r\n\t/*获取模板*/\r\n\tgetTmpl(hash) {\r\n\t\tgetTmpl.call(this, hash);\r\n\t}\r\n\r\n\t/*返回参数对象*/\r\n\tquery(searchs) {\r\n\t\tconst fn = this.constructor.fn;\r\n\t\tif(!fn.isStr(searchs)) return {};\r\n\t\tconst query = {},\r\n\t\t\tsearch = searchs.split('&');\r\n\t\tfn.each(search, function(_search, index) {\r\n\t\t\tvar temp = _search.split('=');\r\n\t\t\tif(temp.length !== 1) {\r\n\t\t\t\tvar key = temp[0];\r\n\t\t\t\tvar value = temp[1];\r\n\t\t\t\tquery[key] = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn query;\r\n\t}\r\n\r\n\t/*获取|设置hash-url参数*/\r\n\tsearch(el, search) {\r\n\r\n\t\tconst fn = this.constructor.fn,\r\n\t\t\ttmpl = this.constructor.tmpl;\r\n\r\n\t\tlet path = '';\r\n\r\n\t\ttry {\r\n\t\t\tpath = tmpl.attr(el, 'href').split('?');\r\n\t\t} catch(e) {\r\n\t\t\tpath = el.split('?');\r\n\t\t}\r\n\r\n\t\tif(search) {\r\n\t\t\tif(fn.isObj(search)) {\r\n\t\t\t\tsearch = fn.serialize(search);\r\n\t\t\t}\r\n\t\t\tpath[1] = search;\r\n\t\t\ttmpl.attr(el, {\r\n\t\t\t\thref: path.join('?')\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn path[1];\r\n\t\t}\r\n\t}\r\n\r\n\t/*分离hash和hash-search，只取hash*/\r\n\tgetHash(hash) {\r\n\t\tif(hash === undefined) {\r\n\t\t\thash = window.location.hash.replace('#', '');\r\n\t\t}\r\n\t\tconst path = hash.replace('#', '').split('?');\r\n\t\treturn path[0];\r\n\t}\r\n\r\n\t/* 修改路由link的点击的状态 */\r\n\tchangeRoutereStatus(status) {\r\n\t\tthis.routerStatus = status;\r\n\t}\r\n}\r\n\r\n//查看是否在全局中存在插件\r\nif(window.Tmpl && typeof Tmpl === 'function') {\r\n\tTmplRouter.install(Tmpl);\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/tmpl-router/tmpl-router.js","//TmplRouter 文件入口\r\nimport TmplRouter from './tmpl-router/tmpl-router';\r\n\r\n(function(global, factory) {\r\n\tif(typeof demand === 'function') {\r\n\t\tdemand.define('tmpl-router', factory);\r\n\t}\r\n})(typeof window !== 'undefined' ? window : this, function() {\r\n\r\n\tTmplRouter.version = \"v1.0.3\";\r\n\r\n\treturn TmplRouter;\r\n});\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/*默认配置*/\r\nconst config = {\r\n\trouterLink: 'tmpl-router', //.tmpl-router                       \r\n\trouterLinkActive: 'tmpl-router-active', //.tmpl-router-active\r\n\trouterView: 'tmpl-router-view', //#tmpl-router-view\r\n\trouterAnchor: 'tmpl-router-anchor', //锚点用的class\r\n\trouterAnchorAttr:'tmpl-anchor',\t\t//路由锚点的id属性\r\n\trouterAnchorTop:'tmpl-anchor-top',//路由锚点的差点\r\n\tanchorTime: 1000, //默认锚点路由 1000/17\r\n\tdata: {},\r\n\tmethods: {}\r\n};\r\n\r\nexport default config;\n\n\n// WEBPACK FOOTER //\n// ./src/tmpl-router/config.js","/*\r\n *\t动态加载模板 \r\n * */\r\n\r\nexport default function getTmpl(hash) {\r\n\r\n\tconst fn = this.constructor.fn;\r\n\r\n\tconst tmpl = this.constructor.tmpl;\r\n\r\n\tconst _this = this;\r\n    \r\n    //查看当前的路由 模板是否加载回来了\r\n\tif((!this.routes[hash]) || this.routes[hash]['view'].length > 0 || this.routes[hash]['temp'].childNodes.length > 0) return; \r\n\r\n\tconst tmplUrl = this.routes[hash]['tmplUrl']; //获取请求的url\r\n\r\n\tconst tmplId = this.routes[hash]['tmplId']; //获取静态模板的id\r\n\r\n\t/*动态模板*/\r\n\tif(tmplUrl) {\r\n\t\ttry {\r\n\t\t\t$.ajax({\r\n\t\t\t\tasync: false,\r\n\t\t\t\turl: tmplUrl,\r\n\t\t\t\tsuccess: function(data) {\r\n\t\t\t\t\t_this.routes[hash]['temp'].appendChild(tmpl.create(data.tmpl));\r\n\t\t\t\t\tfilterTextNode.call(_this, _this.routes[hash]['temp']);\r\n\t\t\t\t\t_this.changeRoutereStatus(false);\r\n\t\t\t\t},\r\n\t\t\t\terror: function(data) {\r\n\t\t\t\t\t_this.changeRoutereStatus(true);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch(e) {\r\n\t\t\tfn.ajax({\r\n\t\t\t\tasync: false,\r\n\t\t\t\turl: tmplUrl,\r\n\t\t\t\tsuccess: function(data) {\r\n\t\t\t\t\t_this.routes[hash]['temp'].appendChild(tmpl.create(data.tmpl));\r\n\t\t\t\t\tfilterTextNode.call(_this, _this.routes[hash]['temp']);\r\n\t\t\t\t\t_this.changeRoutereStatus(false);\r\n\t\t\t\t},\r\n\t\t\t\terror: function(data) {\r\n\t\t\t\t\t_this.changeRoutereStatus(true);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t} else if(tmplId) {\r\n\t\ttry {\r\n\t\t\tthis.routes[hash]['temp'].appendChild(tmpl.create(tmpl.html(fn.getEl(tmplId)))); //非动态模板\t\r\n\t\t} catch(e) {\r\n\t\t\tthis.routes[hash]['temp'].appendChild(tmpl.create(''));\r\n\t\t}\r\n\t\tthis.changeRoutereStatus(true);\r\n\t}\r\n}\r\n\r\n/*清空空的文本节点*/\r\nfunction filterTextNode(parentEl) {\r\n\r\n\tconst fn = this.constructor.fn;\r\n\r\n\tconst tmpl = this.constructor.tmpl;\r\n\r\n\tfn.each(parentEl.childNodes, (el, index) => {\r\n\t\tif(el && el.nodeType === 3 && el.textContent.trim() === '') {\r\n\t\t\ttmpl.remove(el);\r\n\t\t}\r\n\t});\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/tmpl-router/get-tmpl.js","/*\r\n *\t路由中的hash方法处理\r\n * */\r\n\r\nexport default function protoHashChange() {\r\n\r\n    const fn = this.constructor.fn,\r\n        path = window.location.hash.replace('#', ''),\r\n        routerBtns = fn.getEls(this.config.routerLink), //获取路由绑定的节点\r\n        lastRouter = this.$lastRouter;\r\n\r\n    let hash = this.getHash(path), //获取hash\r\n        hasAlias = false; //是否有别名\r\n\r\n    if(hash === '') hash = '/'; //如果不存在hash设置为根目录\r\n\r\n    //走别名路由\r\n    if(this.alias[hash]) {\r\n        hasAlias = true;\r\n        //判断是不是别名的路由\r\n        hash = getPathAlias.apply(this, [(hash === '/' ? hash : path), null]);\r\n    }\r\n\r\n    //存在路由绑定\r\n    if(routerBtns.length === 0) return this;\r\n\r\n    //error页面\r\n    if(!this.alias[hash] && !this.routes[hash]) {\r\n        fn.run(this.config.error, this);\r\n        return;\r\n    }\r\n\r\n    //使用路由中的钩子\r\n    fn.run(this.routes[hash].routerEnter, this, [path, this.$from]);\r\n\r\n    /*路由进入的全局钩子*/\r\n    fn.run(this.config.routerEnter, this, [path, this.$from]);\r\n\r\n    /*如果是存在别名路径，返回代理的那个路径*/\r\n    hashChange.apply(this, [routerBtns, (hasAlias ? hash : path), path]);\r\n}\r\n\r\n/*hashChange的处理*/\r\nfunction hashChange(routerBtns, path, fullPath) {\r\n\r\n    const fn = this.constructor.fn,\r\n        tmpl = this.constructor.tmpl,\r\n        hash = this.getHash(path),\r\n        lastRouter = this.$lastRouter;\r\n\r\n    //记录被点击的router-link\r\n    let alinkEl = null;\r\n\r\n    //默认动态加载模块\r\n    this.getTmpl(hash);\r\n\r\n    //是否存在最后一个路由地址\r\n    if(lastRouter) {\r\n        /*如果不是匹配的路由视图，则不显示在路由视图中*/\r\n        hideTmplEl.call(this, this.getHash(lastRouter));\r\n        this.$from = fullPath;\r\n    }\r\n\r\n    //记录最后的路由路径\r\n    this.$lastRouter = path;\r\n\r\n    showTmplEl.apply(this, [hash]); //显示路由的view\r\n\r\n    //修改对应的状态\r\n    fn.each(routerBtns, (el, index) => {\r\n        const path = tmpl.attr(el, 'href'),\r\n            href = this.getHash(path);\r\n\r\n        if(href === hash) {\r\n            this.currentRouter = href; //保存当前的路由\r\n\r\n            alinkEl = el; //保存按钮节点\r\n\r\n            tmpl.addClass(el, this.config.routerLinkActive); //修改路由link的样式\r\n        } else {\r\n            /*存在配置路由*/\r\n            if(this.routes[href]) hideTmplEl.call(this, href); //如果不是匹配的路由视图，则不显示在路由视图中\r\n\r\n            tmpl.removeClass(el, this.config.routerLinkActive);\r\n        }\r\n\r\n        /*如果设置的节点没有绑定到对应的节点上*/\r\n        if(!alinkEl) this.currentRouter = hash;\r\n    });\r\n\r\n    //设置keeplive\r\n    setRouterScroll.call(this, hash);\r\n\r\n    //使用路由中的钩子\r\n    fn.run(this.routes[hash].routerEntered, this, [path, this.$from, alinkEl]);\r\n\r\n    //调用全局进入结束钩子\r\n    fn.run(this.config.routerEntered, this, [path, this.$from, alinkEl]);\r\n}\r\n\r\n/*检查当前路径是否存在别名*/\r\nfunction getPathAlias(path, el) {\r\n\r\n    const fn = this.constructor.fn,\r\n        hash = this.getHash(path),\r\n        alias = this.alias[hash];\r\n\r\n    //别名触发钩子\r\n    /*if(this.routes[hash]) {\r\n        fn.run(this.routes[hash].routerEnter, this, [path]);\r\n        fn.run(this.config.routerEnter, this, [path, el]);\r\n        fn.run(this.routes[hash].routerEntered, this, [path]);\r\n        fn.run(this.config.routerEntered, this, [path, el]);\r\n    }*/\r\n\r\n    //如果别名存在别名，递归使用\r\n    if(this.alias[alias]) {\r\n        return getPathAlias.apply(this, [alias, el]);\r\n    } else {\r\n        return alias;\r\n    }\r\n}\r\n\r\n/*保存节点信息*/\r\nfunction hideTmplEl(hash) {\r\n    const fn = this.constructor.fn;\r\n    /*如果不是匹配的路由视图，则不显示在路由视图中*/\r\n    fn.each(this.routes[hash].view, (el, index) => {\r\n        this.routes[hash].temp.appendChild(el);\r\n    });\r\n    this.routes[hash].view = [];\r\n}\r\n\r\n/*显示节点信息*/\r\nfunction showTmplEl(hash) {\r\n\r\n    const fn = this.constructor.fn,\r\n        tmpl = this.constructor.tmpl,\r\n        view = this.routerView;\r\n\r\n    //更新view层\r\n    view.appendChild(this.routes[hash].temp);\r\n\r\n    //保存view层节点\r\n    fn.each(tmpl.children(view), (el, index) => {\r\n        this.routes[hash].view.push(el);\r\n    });\r\n}\r\n\r\n//设置路由的scroll\r\nfunction setRouterScroll(hash) {\r\n    /*是否使用了保存之前的状态*/\r\n    if(this.config.keepLive && this.routes[hash].keepLive) {\r\n        setScrollTop.call(this, this.routes[hash].scrollTop);\r\n    } else {\r\n        setScrollTop.call(this, 0);\r\n    }\r\n}\r\n\r\n/*设置scrollTop*/\r\nfunction setScrollTop(num) {\r\n    const fn = this.constructor.fn;\r\n    if(!fn.isNum(num)) return 0;\r\n    try {\r\n        document.body.scrollTop = parseFloat(num);\r\n    } catch(e) {\r\n        document.documentElement.scrollTop = parseFloat(num);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/tmpl-router/hash-change.js","//配置参数\r\nimport config from './config';\r\n//设置的handler\r\nimport {\r\n\tsetRouter,\r\n\tsetInstance,\r\n\tsetRouterLinkStatus,\r\n\tsetRouterAnchor,\r\n\tsetkeepLive,\r\n\tsetPaths,\r\n\tsetHashEvent\r\n} from './set';\r\n//路由初始\r\nexport default function init(opts) {\r\n\r\n\tconst fn = this.constructor.fn;\r\n\t\r\n\tthis.routes = {};\r\n\t\r\n\t//把第一次的实例对象挂在到构造上\r\n\tthis.constructor.tmplRouter = this;\r\n\t\r\n\t//只有一次路由实例，挂载到tmpl上\r\n\tthis.constructor.tmpl.constructor.router = this;\r\n\r\n\tthis.config = fn.extend(fn.copy(config), opts);\r\n\t\r\n\tthis.routerView = fn.getEl(this.config.routerView);\r\n\r\n\tsetRouter.call(this, this.config.routes ? this.config.routes : {});\r\n\r\n\tsetInstance.call(this, 'methods'); //设置methods\r\n\r\n\tsetInstance.call(this, 'data'); //设置data\r\n\r\n\tsetRouterLinkStatus.call(this); //设置路由链接的状态\r\n\r\n\tsetRouterAnchor.call(this, this.config.anchorTime); //设置路由的锚点形式\r\n\r\n\tsetkeepLive.call(this); //设置保持状态\r\n\r\n\tsetPaths.call(this, this.routes); //处理路由详情 \r\n\r\n\tsetHashEvent.call(this); //设置hash\r\n\r\n\tfn.run(this.config.created, this); //所有创建后的钩子\r\n\r\n\tthis.hashChange(); //初始化好了初始化hash\r\n\r\n\tfn.run(this.config.mounted, this); //所有完毕后的钩子\r\n\r\n};\n\n\n// WEBPACK FOOTER //\n// ./src/tmpl-router/init.js","//设置路由的路径\r\nexport function setRouter(routers, path) {\r\n\r\n    const fn = this.constructor.fn,\r\n        _path = (path ? path : '');\r\n\r\n    fn.each(routers, (router, index) => {\r\n        if(router.path === undefined) return;\r\n        const __path = _path + router.path;\r\n        if(fn.isArr(router.modules)) {\r\n            setRouter.apply(this, [router.modules, __path]);\r\n        }\r\n        this.routes[__path] = router;\r\n        delete router.modules;\r\n    });\r\n}\r\n\r\n//设置data和methods方法\r\nexport function setInstance(type) {\r\n\r\n    const fn = this.constructor.fn,\r\n        get = this.config[type];\r\n\r\n    if(!fn.isObj(get)) {\r\n        return;\r\n    }\r\n\r\n    fn.each(get, (_get, key) => {\r\n        this[key] = _get;\r\n    });\r\n}\r\n\r\n/*设置路由的状态是够允许跳转*/\r\nexport function setRouterLinkStatus() {\r\n\r\n    const fn = this.constructor.fn;\r\n\r\n    const tmpl = this.constructor.tmpl;\r\n\r\n    this.changeRoutereStatus(true);\r\n\r\n    const routerBtns = fn.getEls(this.config.routerLink); //获取路由绑定的节点\r\n\r\n    fn.each(routerBtns, (routerBtn, index) => {\r\n        fn.on(routerBtn, 'click', (event) => {\r\n            const path = tmpl.attr(routerBtn, 'href'),\r\n                hash = this.getHash(path);\r\n            if(!(this.getHash(this.$lastRouter) === hash)) {\r\n                //点击路由链接触发的钩子\r\n                fn.run(this.config.triggerRouter, this, [path, routerBtn]);\r\n            }\r\n            if(!this.routerStatus) {\r\n                event.preventDefault();\r\n            } else {\r\n                this.redirect(path);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n/*设置路由的锚点形式*/\r\nexport function setRouterAnchor(time) {\r\n    const fn = this.constructor.fn,\r\n        tmpl = this.constructor.tmpl;\r\n\r\n    function stopScroll(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    //获取路由绑定的节点\r\n    tmpl.on(document, this.config.routerAnchor, 'click', (event, el) => {\r\n\r\n        const anchorId = tmpl.attr(el, this.config.routerAnchorAttr),\r\n            anchorEl = fn.getEl(anchorId);\r\n\r\n        let anchorOffsetTop = tmpl.attr(el, this.config.routerAnchorTop);\r\n\r\n        anchorOffsetTop = fn.isNum(anchorOffsetTop) ? Number(anchorOffsetTop) : 0;\r\n\r\n        if(fn.isEl(anchorEl)) {\r\n            //定义滑动阻止默认动作\r\n            window.addEventListener('mousewheel', stopScroll);\r\n\r\n            tmpl.animate(document, {\r\n                'scrollTop': tmpl.offset(anchorEl).top + anchorOffsetTop\r\n            }, time, function() {\r\n                window.removeEventListener('mousewheel', stopScroll);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n/*设置保持状态*/\r\nexport function setkeepLive() {\r\n    const fn = this.constructor.fn;\r\n    if(!this.config.keepLive) return;\r\n    fn.on(window, 'scroll', (event) => {\r\n        if(this.routes[this.currentRouter] && this.routes[this.currentRouter].keepLive) {\r\n            this.routes[this.currentRouter].scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\r\n        }\r\n    });\r\n}\r\n\r\n//初始处理路由信息\r\nexport function setPaths(routes) {\r\n\r\n    const fn = this.constructor.fn;\r\n\r\n    this.alias = {};\r\n\r\n    fn.each(routes, (router, path) => {\r\n\r\n        const alias = router.alias;\r\n\r\n        this.routes[path].view = []; //设置视图节点\r\n\r\n        //如果设置了全局的keepLive，就会默认设置保持节点为true,全局设定状态的时候是支持保持状态的\r\n        if(this.config.keepLive && this.routes[path].keepLive === undefined) {\r\n            this.routes[path].keepLive = true;\r\n        }\r\n\r\n        this.routes[path].temp = document.createDocumentFragment(); //设置临时存放节点\r\n\r\n        //存在别名\r\n        if(alias) {\r\n            this.alias[alias] = path;\r\n        }\r\n    });\r\n}\r\n\r\n//设置hash\r\nexport function setHashEvent() {\r\n\r\n    const tmpl = this.constructor.tmpl;\r\n\r\n    if(!this.constructor.hasTmplRouter) {\r\n        //修改hash时触发修改\r\n        window.onhashchange = (event) => {\r\n            this.hashChange();\r\n            tmpl.preventDefault(event);\r\n        }\r\n        this.constructor.hasTmplRouter = true;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/tmpl-router/set.js"],"sourceRoot":""}